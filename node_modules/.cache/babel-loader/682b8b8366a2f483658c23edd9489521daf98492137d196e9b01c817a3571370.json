{"ast":null,"code":"// import \"../../css/employee/createemployee.css\"\n// import React, {useEffect, useState} from 'react'\n// import {storage} from \"../../configs/firebase\"\n// import {ref, uploadBytesResumable, getDownloadURL} from 'firebase/storage'\n// import {useNavigate, useParams} from 'react-router-dom'\n// import {Field, ErrorMessage, Form, Formik} from 'formik'\n// import * as Yup from 'yup'\n//\n// import * as departmentService from \"../../services/DepartmentService\"\n// import * as salaryRankService from \"../../services/SalaryRankService\"\n// import * as employeeService from \"../../services/EmployeeService\"\n//\n// import {toast} from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// // CROP IMAGE\n// import Modal from 'react-modal'\n// import Cropper from \"react-easy-crop\";\n// import getCroppedImg from \"./utils/CropImage\"\n//\n// const EditEmployee = () => {\n//     const [departments, setDepartments] = useState([])\n//     const [salaryRanks, setSalaryRanks] = useState([])\n//     const navigate = useNavigate();\n//\n//     const [avatar, setAvatar] = useState();\n//     const [previewAvatar, setPreviewAvatar] = useState()\n//     const [isOpenModal, setIsOpenModal] = useState(false);\n//     const [avatarMessage, setAvatarMessage] = useState(\"\")\n//     // const [percentUpload, setPercentUpload] = useState(0)\n//\n// // CROP IMAGE\n//     const [image, setImage] = React.useState(null);\n//     const [croppedArea, setCroppedArea] = React.useState(null);\n//     const [crop, setCrop] = React.useState({x: 0, y: 0});\n//     const [zoom, setZoom] = React.useState(1);\n//\n//     const {id} = useParams();\n//\n//\n//     const [form, setForm] = useState(\n//         /*        {\n//                     code: \"\",\n//                     name: \"\",\n//                     dob: \"\",\n//                     gender: \"male\",\n//                     address: \"\",\n//                     phone: \"\",\n//                     email: \"\",\n//                     workDate: \"\",\n//                     firebaseUrl: \"\",\n//                     department: 1,\n//                     salaryRank: 1\n//                 }*/\n//     )\n//\n//     useEffect(() => {\n//         getEmployee()\n//         getDepartments();\n//         getSalaryRanks();\n//     }, [])\n//     const getDepartments = async () => {\n//         let temp = await departmentService.getAllDepartments();\n//         setDepartments(temp)\n//     }\n//     const getSalaryRanks = async () => {\n//         let temp = await salaryRankService.getAllSalaryRanks();\n//         setSalaryRanks(temp)\n//     }\n//\n//     const getEmployee = async () => {\n//         let temp = await employeeService.findEmployeeById(id);\n//         setForm(temp)\n//     }\n//\n//     const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\n//         setCroppedArea(croppedAreaPixels);\n//     };\n//     const afterCrop = async () => {\n//         const blob = await getCroppedImg(image, croppedArea);\n//         const previewUrl = window.URL.createObjectURL(blob);\n//         setPreviewAvatar(previewUrl);\n//         setIsOpenModal(false)\n//         setAvatar(blob)\n//         setAvatarMessage(\"\")\n//     };\n// // clear previewAvatar\n//     useEffect(() => {\n//         return () => {\n//             previewAvatar && URL.revokeObjectURL(previewAvatar)\n//         }\n//     }, [previewAvatar])\n//     const cancelCrop = () => {\n//         setIsOpenModal(false)\n//     }\n//\n//     const handleChange = (event) => {\n//         if (event.target.files && event.target.files.length > 0) {\n//             const reader = new FileReader();\n//             reader.readAsDataURL(event.target.files[0]);\n//             reader.addEventListener(\"load\", () => {\n//                 setImage(reader.result);\n//             });\n//             setIsOpenModal(true)\n//         }\n//     }\n//     const submit = (values) => {\n//         if (avatar) {\n//             const storageRef = ref(storage, `/avatar/${Date.now()}.jpeg`);\n//             const uploadTask = uploadBytesResumable(storageRef, avatar);\n//             uploadTask.on(\n//                 \"state_changed\",\n//                 (snapshot) => {\n//                     const percent = Math.round(\n//                         (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//                     );\n//                     /*              setPercentUpload((prevState => {\n//                                       return prevState + 1;\n//                                   }))*/\n//                 },\n//                 () => {\n//                     toast.warning(\"Đã xãy ra lỗi trong quá trình tải ảnh lên fire base !\")\n//                 },\n//                 () => {\n//                     getDownloadURL(uploadTask.snapshot.ref).then((url) => {\n//                         values.firebaseUrl = url;\n//                         employeeService.addEmployee(values).then((success) => {\n//                             if (success) {\n//                                 toast.success(\"Thêm mới nhân viên thành công.\")\n//                                 navigate(\"/employee\")\n//                             } else {\n//                                 toast.warning(\"Đã xãy ra lỗi trong quá trình thêm mới !\")\n//                                 navigate(\"/employee/create-employee\")\n//                             }\n//                         })\n//                     });\n//                 }\n//             );\n//         }\n//     }\n//\n//     const checkAvatar = () => {\n//         if (!previewAvatar || !avatar) {\n//             setAvatarMessage(\"Vui lòng chọn ảnh cho nhân viên !\")\n//         } else {\n//             setAvatarMessage(\"\")\n//         }\n//     }\n//     const selectAvatar = () => {\n//         document.getElementById('upload_avt').click();\n//     }\n//     const validate = {\n//         name: Yup.string().required(\"Vui lòng nhập tên nhân viên !\")\n//             .max(100, \"Họ và tên không được quá 100 ký tự !\")\n//             .min(5, \"Họ và tên không được ít hơn 5 ký tự !\")\n//             .matches(/^[A-ZÀ-Ỹ][a-zà-ỹ]+(\\s[A-ZÀ-Ỹ][a-zà-ỹ]+)+$/\n//                 , \"Họ và tên không được chứa ký tự đặc biệt và viết hoa chữ cái đầu tiên !\"),\n//         dob: Yup.date().required(\"Vui lòng nhập ngày sinh của nhân viên !\")\n//             .max(new Date(), \"Ngày sinh phải là một ngày trong quá khứ !\")\n//             .test('dob', 'Nhân viên phải trên 18 tuổi !',\n//                 function (value, ctx) {\n//                     const valid = new Date().getFullYear() - new Date(value).getFullYear();\n//                     if (valid > 18) {\n//                         return true;\n//                     } else if (valid === 18) {\n//                         const compareMonth = new Date().getMonth() - new Date(value).getMonth();\n//                         if (compareMonth > 0) {\n//                             return true;\n//                         } else if (compareMonth === 0) {\n//                             const compareDate = new Date().getDate() - new Date(value).getDate();\n//                             if (compareDate >= 0) {\n//                                 return true\n//                             }\n//                         }\n//                     }\n//                     return ctx.createError();\n//                 }),\n//         phone: Yup.string().required(\"Vui lòng nhập số điện thoại nhân viên !\")\n//             .matches(/^0\\d{9}$/, \"Số điện thoại bao gồm 10 chữ số bắt đầu bằng số 0 !\"),\n//         email: Yup.string().required(\"Vui lòng nhập email !\")\n//             .matches(/^[a-zA-Z0-9._]+@gmail.com$/, \"Email không đúng định dạng: *********@gmail.com !\"),\n//         workDate: Yup.date().required(\"Vui lòng nhập ngày vào làm của nhân viên !\")\n//             .test('workDate', 'Ngày vào làm chỉ được trước hoặc sau 1 tháng kể từ ngày làm hồ sơ !',\n//                 function (value, ctx) {\n//                     const today = new Date();\n//                     const startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\n//                     const endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);\n//\n//                     if (value < startDate || value > endDate) {\n//                         return ctx.createError();\n//                     }\n//                     return true;\n//                 }),\n//         address: Yup.string().required(\"Vui lòng nhập địa chỉ nhân  viên !\")\n//\n//     }\n//\n//     const customStyles = {\n//         content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             width: \"60%\",\n//             height: \"80%\",\n//             marginRight: '-50%',\n//             transform: 'translate(-50%, -50%)',\n//             justifyContent: \"center\",\n//             borderRadius: \"20px\"\n//         },\n//     };\n//\n//     if (!form) return null;\n//     return (\n//         <div id=\"ce_main\" className=\"shadow-inner\">\n//             {/*            {\n//                 percentUpload > 0 && (\n//                     <span className=\"text-center w-full\">\n//                         Uploading: {percentUpload} %\n//                     </span>)\n//             }*/}\n//             <Formik initialValues={form} onSubmit={submit} validationSchema={Yup.object(validate)}>\n//                 {({errors, touched}) => (\n//                     <Form className=\"flex flex-wrap justify-center p-8 size-full\">\n//                         <div className=\"w-full flex flex-wrap justify-center\">\n//                             <div className=\"w-full md:w-2/3 lg:w-2/3 p-0 flex justify-end items-center\">\n//                                 <span className=\"font-bold text-4xl text-center\">CẬP NHẬT THÔNG TIN NHÂN VIÊN VĂN\n//                                     PHÒNG</span>\n//                             </div>\n//\n//                             <div className=\"w-full md:w-1/3 lg:w-1/3 p-0 flex flex-wrap justify-center items-center\">\n//                                 <div className=\"w-full flex justify-center\">\n//                                     <img\n//                                         className=\"rounded-full bg-white transition duration-300 ease-in-out transform hover:shadow-lg hover:brightness-75 cursor-pointer w-20 h-20 rounded-full ring-2 ring-gray-300 dark:ring-gray-500 p-0.5\"\n//                                         src={previewAvatar ? previewAvatar : \"https://icons.veryicon.com/png/o/internet--web/prejudice/user-128.png\"}\n//                                         alt=\"avatar\" onClick={selectAvatar}/>\n//                                 </div>\n//                                 <br/>\n//                                 <div className=\"w-full flex justify-center\">\n//                                     <span\n//                                         className=\"errorMessage text-sm text-red-600 dark:text-red-500 p-0\">{avatarMessage}</span>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                         <input type=\"file\" hidden id=\"upload_avt\" accept=\"image/!*\"\n//                                onChange={handleChange}/>\n//\n//                         <Field hidden name=\"firebaseUrl\"/>\n//\n//                         <Field hidden name=\"code\"/>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"name\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Họ và tên (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.name ? (errors.name ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                 id=\"name\" name=\"name\"/>\n//\n//                             <ErrorMessage name=\"name\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"dob\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Ngày sinh (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field type=\"date\"\n//                                    className={`w-full block border text-sm rounded-lg p-2 ${touched.dob ? (errors.dob ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                    id=\"dob\" name=\"dob\"/>\n//\n//                             <ErrorMessage name=\"dob\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label className=\"block mt-2 text-sm font-medium p-1\">Giới tính</label>\n//                             <div>\n//                                 <div className=\"inline-flex items-center mr-4\">\n//                                     <Field\n//                                         type=\"radio\"\n//                                         name=\"gender\"\n//                                         id=\"male\"\n//                                         value=\"male\"\n//                                         className=\"form-check-input\"\n//                                         checked\n//                                     />\n//                                     <label htmlFor=\"male\" className=\"ml-2\">\n//                                         Nam\n//                                     </label>\n//                                 </div>\n//                                 <div className=\"inline-flex items-center mr-4\">\n//                                     <Field\n//                                         type=\"radio\"\n//                                         name=\"gender\"\n//                                         id=\"female\"\n//                                         value=\"female\"\n//                                         className=\"form-check-input\"\n//                                     />\n//                                     <label htmlFor=\"female\" className=\"ml-2\">\n//                                         Nữ\n//                                     </label>\n//                                 </div>\n//                                 <div className=\"inline-flex items-center\">\n//                                     <Field\n//                                         type=\"radio\"\n//                                         name=\"gender\"\n//                                         id=\"other\"\n//                                         value=\"other\"\n//                                         className=\"form-check-input\"\n//                                     />\n//                                     <label htmlFor=\"other\" className=\"ml-2\">\n//                                         Khác\n//                                     </label>\n//                                 </div>\n//                             </div>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"phone\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Điện thoại (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.phone ? (errors.phone ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                 id=\"phone\" name=\"phone\"/>\n//\n//                             <ErrorMessage name=\"phone\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-full lg:w-1/3 p-2\">\n//                             <label htmlFor=\"address\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Địa chỉ (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.address ? (errors.address ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                 id=\"address\" name=\"address\"/>\n//\n//                             <ErrorMessage name=\"address\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"email\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Email (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.email ? (errors.email ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                 id=\"email\" name=\"email\" placeholder=\"********@gmail.com\"/>\n//\n//                             <ErrorMessage name=\"email\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"department\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Bộ phận</label>\n//                             <Field component=\"select\"\n//                                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2\"\n//                                    id=\"department\"\n//                                    name=\"department\">\n//                                 {\n//                                     departments.map(dep => (\n//                                         <option key={dep.id} value={dep.id}>{dep.name}</option>\n//                                     ))\n//                                 }\n//                             </Field>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"salaryRank\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Cấp bậc lương</label>\n//                             <Field component=\"select\"\n//                                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2\"\n//                                    id=\"salaryRank\"\n//                                    name=\"salaryRank\">\n//                                 {\n//                                     salaryRanks.map(rank => (\n//                                         <option key={rank.id} value={rank.id}>{rank.salaryRank}</option>\n//                                     ))\n//                                 }\n//                             </Field>\n//                         </div>\n//\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\n//                             <label htmlFor=\"workDate\"\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Ngày vào làm (<span\n//                                 className=\"text-red-500\">*</span>)</label>\n//                             <Field type=\"date\"\n//                                    className={`w-full block border text-sm rounded-lg p-2 ${touched.workDate ? (errors.workDate ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\n//                                    id=\"workDate\" name=\"workDate\"/>\n//\n//                             <ErrorMessage name=\"workDate\" component=\"span\"\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\n//                         </div>\n//\n//                         <div className=\"w-full flex flex-wrap mt-5\">\n//                             <div\n//                                 className=\"w-full sm:w-1/2 lg:w-1/2 p-2 flex justify-start items-center space-x-2\"> <span>\n//                                 <i className=\"fa-solid fa-bullhorn fa-shake fa-lg\"/>\n//                             </span>\n//                                 <span\n//                                     className=\"text-red-500\"> Lưu ý: Bạn phải nhập đầy đủ các ô được đánh dấu (*)</span>\n//                             </div>\n//                             <div className=\"w-full sm:w-1/2 lg:w-1/2 p-2 flex justify-end items-center space-x-2\">\n//                                 <button onClick={checkAvatar} className=\"btn\"\n//                                         style={{background: \"#4CAF50\", marginRight: \"8px\"}}\n//                                         type={\"submit\"}>\n//                                     <span><i className=\"fi fi-rs-disk\"/></span>\n//                                     <span> Lưu</span>\n//                                 </button>\n//                                 <button type={\"reset\"} className=\"btn btn-primary\" style={{background: \"#2196e3\"}}\n//                                         onClick={() => {\n//                                             setPreviewAvatar(null);\n//                                             setAvatar(null)\n//                                             setAvatarMessage(\"\")\n//                                         }}>\n//                                     <span><i className=\"fi fi-rr-eraser\"/></span>\n//                                     <span> Làm mới</span>\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </Form>\n//                 )}\n//             </Formik>\n//             <Modal\n//                 isOpen={isOpenModal}\n//                 onRequestClose={() => {\n//                     setIsOpenModal(false)\n//                 }}\n//                 style={customStyles}\n//                 contentLabel=\"Example Modal\"\n//                 id=\"ce_modal\"\n//             >\n//                 <div className='container-cropper'>\n//                     {image ? (\n//                         <>\n//                             <div className='cropper'>\n//                                 <Cropper\n//                                     image={image}\n//                                     crop={crop}\n//                                     zoom={zoom}\n//                                     aspect={1}\n//                                     onCropChange={setCrop}\n//                                     onZoomChange={setZoom}\n//                                     onCropComplete={onCropComplete}\n//                                 />\n//                             </div>\n//                             <div hidden>\n//                                 {/*                      <Slider\n//                                         min={1}\n//                                         max={3}\n//                                         step={0.1}\n//                                         value={zoom}\n//                                         onChange={(e, zoom) => setZoom(zoom)}\n//                                     />*/}\n//                                 <input className=\"slider\"\n//                                        type=\"range\"\n//                                        min={1}\n//                                        max={3}\n//                                        step={0.1}\n//                                        value={zoom}\n//                                        onChange={(e, zoom) => setZoom(zoom)}\n//                                 />\n//                             </div>\n//                         </>\n//                     ) : null}\n//                 </div>\n//                 <div className=\"flex justify-center\">\n//                     <button className=\"btn\" style={{background: \"#4CAF50\", marginRight: \"8px\"}}\n//                             onClick={afterCrop}>\n//                         <span> Crop</span>\n//                     </button>\n//                     <button className=\"btn btn-primary\" style={{background: \"#2196e3\"}}\n//                             onClick={cancelCrop}>\n//                         Cancel\n//                     </button>\n//                 </div>\n//\n//             </Modal>\n//         </div>\n//     )\n// }\n// export default EditEmployee;","map":{"version":3,"names":[],"sources":["D:/Code_Gym/Data GitHub/final_module/Developer/A0523I1-Repo-FE/src/components/employee/EditEmployee.js"],"sourcesContent":["// import \"../../css/employee/createemployee.css\"\r\n// import React, {useEffect, useState} from 'react'\r\n// import {storage} from \"../../configs/firebase\"\r\n// import {ref, uploadBytesResumable, getDownloadURL} from 'firebase/storage'\r\n// import {useNavigate, useParams} from 'react-router-dom'\r\n// import {Field, ErrorMessage, Form, Formik} from 'formik'\r\n// import * as Yup from 'yup'\r\n//\r\n// import * as departmentService from \"../../services/DepartmentService\"\r\n// import * as salaryRankService from \"../../services/SalaryRankService\"\r\n// import * as employeeService from \"../../services/EmployeeService\"\r\n//\r\n// import {toast} from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n// // CROP IMAGE\r\n// import Modal from 'react-modal'\r\n// import Cropper from \"react-easy-crop\";\r\n// import getCroppedImg from \"./utils/CropImage\"\r\n//\r\n// const EditEmployee = () => {\r\n//     const [departments, setDepartments] = useState([])\r\n//     const [salaryRanks, setSalaryRanks] = useState([])\r\n//     const navigate = useNavigate();\r\n//\r\n//     const [avatar, setAvatar] = useState();\r\n//     const [previewAvatar, setPreviewAvatar] = useState()\r\n//     const [isOpenModal, setIsOpenModal] = useState(false);\r\n//     const [avatarMessage, setAvatarMessage] = useState(\"\")\r\n//     // const [percentUpload, setPercentUpload] = useState(0)\r\n//\r\n// // CROP IMAGE\r\n//     const [image, setImage] = React.useState(null);\r\n//     const [croppedArea, setCroppedArea] = React.useState(null);\r\n//     const [crop, setCrop] = React.useState({x: 0, y: 0});\r\n//     const [zoom, setZoom] = React.useState(1);\r\n//\r\n//     const {id} = useParams();\r\n//\r\n//\r\n//     const [form, setForm] = useState(\r\n//         /*        {\r\n//                     code: \"\",\r\n//                     name: \"\",\r\n//                     dob: \"\",\r\n//                     gender: \"male\",\r\n//                     address: \"\",\r\n//                     phone: \"\",\r\n//                     email: \"\",\r\n//                     workDate: \"\",\r\n//                     firebaseUrl: \"\",\r\n//                     department: 1,\r\n//                     salaryRank: 1\r\n//                 }*/\r\n//     )\r\n//\r\n//     useEffect(() => {\r\n//         getEmployee()\r\n//         getDepartments();\r\n//         getSalaryRanks();\r\n//     }, [])\r\n//     const getDepartments = async () => {\r\n//         let temp = await departmentService.getAllDepartments();\r\n//         setDepartments(temp)\r\n//     }\r\n//     const getSalaryRanks = async () => {\r\n//         let temp = await salaryRankService.getAllSalaryRanks();\r\n//         setSalaryRanks(temp)\r\n//     }\r\n//\r\n//     const getEmployee = async () => {\r\n//         let temp = await employeeService.findEmployeeById(id);\r\n//         setForm(temp)\r\n//     }\r\n//\r\n//     const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\r\n//         setCroppedArea(croppedAreaPixels);\r\n//     };\r\n//     const afterCrop = async () => {\r\n//         const blob = await getCroppedImg(image, croppedArea);\r\n//         const previewUrl = window.URL.createObjectURL(blob);\r\n//         setPreviewAvatar(previewUrl);\r\n//         setIsOpenModal(false)\r\n//         setAvatar(blob)\r\n//         setAvatarMessage(\"\")\r\n//     };\r\n// // clear previewAvatar\r\n//     useEffect(() => {\r\n//         return () => {\r\n//             previewAvatar && URL.revokeObjectURL(previewAvatar)\r\n//         }\r\n//     }, [previewAvatar])\r\n//     const cancelCrop = () => {\r\n//         setIsOpenModal(false)\r\n//     }\r\n//\r\n//     const handleChange = (event) => {\r\n//         if (event.target.files && event.target.files.length > 0) {\r\n//             const reader = new FileReader();\r\n//             reader.readAsDataURL(event.target.files[0]);\r\n//             reader.addEventListener(\"load\", () => {\r\n//                 setImage(reader.result);\r\n//             });\r\n//             setIsOpenModal(true)\r\n//         }\r\n//     }\r\n//     const submit = (values) => {\r\n//         if (avatar) {\r\n//             const storageRef = ref(storage, `/avatar/${Date.now()}.jpeg`);\r\n//             const uploadTask = uploadBytesResumable(storageRef, avatar);\r\n//             uploadTask.on(\r\n//                 \"state_changed\",\r\n//                 (snapshot) => {\r\n//                     const percent = Math.round(\r\n//                         (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n//                     );\r\n//                     /*              setPercentUpload((prevState => {\r\n//                                       return prevState + 1;\r\n//                                   }))*/\r\n//                 },\r\n//                 () => {\r\n//                     toast.warning(\"Đã xãy ra lỗi trong quá trình tải ảnh lên fire base !\")\r\n//                 },\r\n//                 () => {\r\n//                     getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n//                         values.firebaseUrl = url;\r\n//                         employeeService.addEmployee(values).then((success) => {\r\n//                             if (success) {\r\n//                                 toast.success(\"Thêm mới nhân viên thành công.\")\r\n//                                 navigate(\"/employee\")\r\n//                             } else {\r\n//                                 toast.warning(\"Đã xãy ra lỗi trong quá trình thêm mới !\")\r\n//                                 navigate(\"/employee/create-employee\")\r\n//                             }\r\n//                         })\r\n//                     });\r\n//                 }\r\n//             );\r\n//         }\r\n//     }\r\n//\r\n//     const checkAvatar = () => {\r\n//         if (!previewAvatar || !avatar) {\r\n//             setAvatarMessage(\"Vui lòng chọn ảnh cho nhân viên !\")\r\n//         } else {\r\n//             setAvatarMessage(\"\")\r\n//         }\r\n//     }\r\n//     const selectAvatar = () => {\r\n//         document.getElementById('upload_avt').click();\r\n//     }\r\n//     const validate = {\r\n//         name: Yup.string().required(\"Vui lòng nhập tên nhân viên !\")\r\n//             .max(100, \"Họ và tên không được quá 100 ký tự !\")\r\n//             .min(5, \"Họ và tên không được ít hơn 5 ký tự !\")\r\n//             .matches(/^[A-ZÀ-Ỹ][a-zà-ỹ]+(\\s[A-ZÀ-Ỹ][a-zà-ỹ]+)+$/\r\n//                 , \"Họ và tên không được chứa ký tự đặc biệt và viết hoa chữ cái đầu tiên !\"),\r\n//         dob: Yup.date().required(\"Vui lòng nhập ngày sinh của nhân viên !\")\r\n//             .max(new Date(), \"Ngày sinh phải là một ngày trong quá khứ !\")\r\n//             .test('dob', 'Nhân viên phải trên 18 tuổi !',\r\n//                 function (value, ctx) {\r\n//                     const valid = new Date().getFullYear() - new Date(value).getFullYear();\r\n//                     if (valid > 18) {\r\n//                         return true;\r\n//                     } else if (valid === 18) {\r\n//                         const compareMonth = new Date().getMonth() - new Date(value).getMonth();\r\n//                         if (compareMonth > 0) {\r\n//                             return true;\r\n//                         } else if (compareMonth === 0) {\r\n//                             const compareDate = new Date().getDate() - new Date(value).getDate();\r\n//                             if (compareDate >= 0) {\r\n//                                 return true\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                     return ctx.createError();\r\n//                 }),\r\n//         phone: Yup.string().required(\"Vui lòng nhập số điện thoại nhân viên !\")\r\n//             .matches(/^0\\d{9}$/, \"Số điện thoại bao gồm 10 chữ số bắt đầu bằng số 0 !\"),\r\n//         email: Yup.string().required(\"Vui lòng nhập email !\")\r\n//             .matches(/^[a-zA-Z0-9._]+@gmail.com$/, \"Email không đúng định dạng: *********@gmail.com !\"),\r\n//         workDate: Yup.date().required(\"Vui lòng nhập ngày vào làm của nhân viên !\")\r\n//             .test('workDate', 'Ngày vào làm chỉ được trước hoặc sau 1 tháng kể từ ngày làm hồ sơ !',\r\n//                 function (value, ctx) {\r\n//                     const today = new Date();\r\n//                     const startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\r\n//                     const endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);\r\n//\r\n//                     if (value < startDate || value > endDate) {\r\n//                         return ctx.createError();\r\n//                     }\r\n//                     return true;\r\n//                 }),\r\n//         address: Yup.string().required(\"Vui lòng nhập địa chỉ nhân  viên !\")\r\n//\r\n//     }\r\n//\r\n//     const customStyles = {\r\n//         content: {\r\n//             top: '50%',\r\n//             left: '50%',\r\n//             right: 'auto',\r\n//             bottom: 'auto',\r\n//             width: \"60%\",\r\n//             height: \"80%\",\r\n//             marginRight: '-50%',\r\n//             transform: 'translate(-50%, -50%)',\r\n//             justifyContent: \"center\",\r\n//             borderRadius: \"20px\"\r\n//         },\r\n//     };\r\n//\r\n//     if (!form) return null;\r\n//     return (\r\n//         <div id=\"ce_main\" className=\"shadow-inner\">\r\n//             {/*            {\r\n//                 percentUpload > 0 && (\r\n//                     <span className=\"text-center w-full\">\r\n//                         Uploading: {percentUpload} %\r\n//                     </span>)\r\n//             }*/}\r\n//             <Formik initialValues={form} onSubmit={submit} validationSchema={Yup.object(validate)}>\r\n//                 {({errors, touched}) => (\r\n//                     <Form className=\"flex flex-wrap justify-center p-8 size-full\">\r\n//                         <div className=\"w-full flex flex-wrap justify-center\">\r\n//                             <div className=\"w-full md:w-2/3 lg:w-2/3 p-0 flex justify-end items-center\">\r\n//                                 <span className=\"font-bold text-4xl text-center\">CẬP NHẬT THÔNG TIN NHÂN VIÊN VĂN\r\n//                                     PHÒNG</span>\r\n//                             </div>\r\n//\r\n//                             <div className=\"w-full md:w-1/3 lg:w-1/3 p-0 flex flex-wrap justify-center items-center\">\r\n//                                 <div className=\"w-full flex justify-center\">\r\n//                                     <img\r\n//                                         className=\"rounded-full bg-white transition duration-300 ease-in-out transform hover:shadow-lg hover:brightness-75 cursor-pointer w-20 h-20 rounded-full ring-2 ring-gray-300 dark:ring-gray-500 p-0.5\"\r\n//                                         src={previewAvatar ? previewAvatar : \"https://icons.veryicon.com/png/o/internet--web/prejudice/user-128.png\"}\r\n//                                         alt=\"avatar\" onClick={selectAvatar}/>\r\n//                                 </div>\r\n//                                 <br/>\r\n//                                 <div className=\"w-full flex justify-center\">\r\n//                                     <span\r\n//                                         className=\"errorMessage text-sm text-red-600 dark:text-red-500 p-0\">{avatarMessage}</span>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <input type=\"file\" hidden id=\"upload_avt\" accept=\"image/!*\"\r\n//                                onChange={handleChange}/>\r\n//\r\n//                         <Field hidden name=\"firebaseUrl\"/>\r\n//\r\n//                         <Field hidden name=\"code\"/>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"name\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Họ và tên (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field\r\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.name ? (errors.name ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                 id=\"name\" name=\"name\"/>\r\n//\r\n//                             <ErrorMessage name=\"name\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"dob\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Ngày sinh (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field type=\"date\"\r\n//                                    className={`w-full block border text-sm rounded-lg p-2 ${touched.dob ? (errors.dob ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                    id=\"dob\" name=\"dob\"/>\r\n//\r\n//                             <ErrorMessage name=\"dob\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label className=\"block mt-2 text-sm font-medium p-1\">Giới tính</label>\r\n//                             <div>\r\n//                                 <div className=\"inline-flex items-center mr-4\">\r\n//                                     <Field\r\n//                                         type=\"radio\"\r\n//                                         name=\"gender\"\r\n//                                         id=\"male\"\r\n//                                         value=\"male\"\r\n//                                         className=\"form-check-input\"\r\n//                                         checked\r\n//                                     />\r\n//                                     <label htmlFor=\"male\" className=\"ml-2\">\r\n//                                         Nam\r\n//                                     </label>\r\n//                                 </div>\r\n//                                 <div className=\"inline-flex items-center mr-4\">\r\n//                                     <Field\r\n//                                         type=\"radio\"\r\n//                                         name=\"gender\"\r\n//                                         id=\"female\"\r\n//                                         value=\"female\"\r\n//                                         className=\"form-check-input\"\r\n//                                     />\r\n//                                     <label htmlFor=\"female\" className=\"ml-2\">\r\n//                                         Nữ\r\n//                                     </label>\r\n//                                 </div>\r\n//                                 <div className=\"inline-flex items-center\">\r\n//                                     <Field\r\n//                                         type=\"radio\"\r\n//                                         name=\"gender\"\r\n//                                         id=\"other\"\r\n//                                         value=\"other\"\r\n//                                         className=\"form-check-input\"\r\n//                                     />\r\n//                                     <label htmlFor=\"other\" className=\"ml-2\">\r\n//                                         Khác\r\n//                                     </label>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"phone\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Điện thoại (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field\r\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.phone ? (errors.phone ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                 id=\"phone\" name=\"phone\"/>\r\n//\r\n//                             <ErrorMessage name=\"phone\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-full lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"address\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Địa chỉ (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field\r\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.address ? (errors.address ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                 id=\"address\" name=\"address\"/>\r\n//\r\n//                             <ErrorMessage name=\"address\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"email\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Email (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field\r\n//                                 className={`w-full block border text-sm rounded-lg p-2 ${touched.email ? (errors.email ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                 id=\"email\" name=\"email\" placeholder=\"********@gmail.com\"/>\r\n//\r\n//                             <ErrorMessage name=\"email\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"department\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Bộ phận</label>\r\n//                             <Field component=\"select\"\r\n//                                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2\"\r\n//                                    id=\"department\"\r\n//                                    name=\"department\">\r\n//                                 {\r\n//                                     departments.map(dep => (\r\n//                                         <option key={dep.id} value={dep.id}>{dep.name}</option>\r\n//                                     ))\r\n//                                 }\r\n//                             </Field>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"salaryRank\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Cấp bậc lương</label>\r\n//                             <Field component=\"select\"\r\n//                                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2\"\r\n//                                    id=\"salaryRank\"\r\n//                                    name=\"salaryRank\">\r\n//                                 {\r\n//                                     salaryRanks.map(rank => (\r\n//                                         <option key={rank.id} value={rank.id}>{rank.salaryRank}</option>\r\n//                                     ))\r\n//                                 }\r\n//                             </Field>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full md:w-1/2 lg:w-1/3 p-2\">\r\n//                             <label htmlFor=\"workDate\"\r\n//                                    className=\"block mt-2 text-sm font-medium p-1\">Ngày vào làm (<span\r\n//                                 className=\"text-red-500\">*</span>)</label>\r\n//                             <Field type=\"date\"\r\n//                                    className={`w-full block border text-sm rounded-lg p-2 ${touched.workDate ? (errors.workDate ? \"bg-red-50 border-red-500\" : \"bg-green-50 border-green-500\") : \"\"}`}\r\n//                                    id=\"workDate\" name=\"workDate\"/>\r\n//\r\n//                             <ErrorMessage name=\"workDate\" component=\"span\"\r\n//                                           className=\"mt-1 text-sm text-red-600 dark:text-red-500 p-1 errorMessage\"/>\r\n//                         </div>\r\n//\r\n//                         <div className=\"w-full flex flex-wrap mt-5\">\r\n//                             <div\r\n//                                 className=\"w-full sm:w-1/2 lg:w-1/2 p-2 flex justify-start items-center space-x-2\"> <span>\r\n//                                 <i className=\"fa-solid fa-bullhorn fa-shake fa-lg\"/>\r\n//                             </span>\r\n//                                 <span\r\n//                                     className=\"text-red-500\"> Lưu ý: Bạn phải nhập đầy đủ các ô được đánh dấu (*)</span>\r\n//                             </div>\r\n//                             <div className=\"w-full sm:w-1/2 lg:w-1/2 p-2 flex justify-end items-center space-x-2\">\r\n//                                 <button onClick={checkAvatar} className=\"btn\"\r\n//                                         style={{background: \"#4CAF50\", marginRight: \"8px\"}}\r\n//                                         type={\"submit\"}>\r\n//                                     <span><i className=\"fi fi-rs-disk\"/></span>\r\n//                                     <span> Lưu</span>\r\n//                                 </button>\r\n//                                 <button type={\"reset\"} className=\"btn btn-primary\" style={{background: \"#2196e3\"}}\r\n//                                         onClick={() => {\r\n//                                             setPreviewAvatar(null);\r\n//                                             setAvatar(null)\r\n//                                             setAvatarMessage(\"\")\r\n//                                         }}>\r\n//                                     <span><i className=\"fi fi-rr-eraser\"/></span>\r\n//                                     <span> Làm mới</span>\r\n//                                 </button>\r\n//                             </div>\r\n//                         </div>\r\n//                     </Form>\r\n//                 )}\r\n//             </Formik>\r\n//             <Modal\r\n//                 isOpen={isOpenModal}\r\n//                 onRequestClose={() => {\r\n//                     setIsOpenModal(false)\r\n//                 }}\r\n//                 style={customStyles}\r\n//                 contentLabel=\"Example Modal\"\r\n//                 id=\"ce_modal\"\r\n//             >\r\n//                 <div className='container-cropper'>\r\n//                     {image ? (\r\n//                         <>\r\n//                             <div className='cropper'>\r\n//                                 <Cropper\r\n//                                     image={image}\r\n//                                     crop={crop}\r\n//                                     zoom={zoom}\r\n//                                     aspect={1}\r\n//                                     onCropChange={setCrop}\r\n//                                     onZoomChange={setZoom}\r\n//                                     onCropComplete={onCropComplete}\r\n//                                 />\r\n//                             </div>\r\n//                             <div hidden>\r\n//                                 {/*                      <Slider\r\n//                                         min={1}\r\n//                                         max={3}\r\n//                                         step={0.1}\r\n//                                         value={zoom}\r\n//                                         onChange={(e, zoom) => setZoom(zoom)}\r\n//                                     />*/}\r\n//                                 <input className=\"slider\"\r\n//                                        type=\"range\"\r\n//                                        min={1}\r\n//                                        max={3}\r\n//                                        step={0.1}\r\n//                                        value={zoom}\r\n//                                        onChange={(e, zoom) => setZoom(zoom)}\r\n//                                 />\r\n//                             </div>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//                 <div className=\"flex justify-center\">\r\n//                     <button className=\"btn\" style={{background: \"#4CAF50\", marginRight: \"8px\"}}\r\n//                             onClick={afterCrop}>\r\n//                         <span> Crop</span>\r\n//                     </button>\r\n//                     <button className=\"btn btn-primary\" style={{background: \"#2196e3\"}}\r\n//                             onClick={cancelCrop}>\r\n//                         Cancel\r\n//                     </button>\r\n//                 </div>\r\n//\r\n//             </Modal>\r\n//         </div>\r\n//     )\r\n// }\r\n// export default EditEmployee;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}