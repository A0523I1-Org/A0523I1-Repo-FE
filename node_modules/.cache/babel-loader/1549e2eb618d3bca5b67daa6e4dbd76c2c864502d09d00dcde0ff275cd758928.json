{"ast":null,"code":"const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener(\"load\", () => resolve(image));\n  image.addEventListener(\"error\", error => reject(error));\n  image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n  image.src = url;\n});\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(data, 0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x, 0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y);\n\n  // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n  // return canvas;\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      resolve(blob);\n    }, \"image/jpeg\", 0.66);\n  });\n}\nexport const generateDownload = async (imageSrc, crop) => {\n  if (!crop || !imageSrc) {\n    return;\n  }\n  const canvas = await getCroppedImg(imageSrc, crop);\n  canvas.toBlob(blob => {\n    const previewUrl = window.URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.download = \"image.jpeg\";\n    anchor.href = URL.createObjectURL(blob);\n    anchor.click();\n    window.URL.revokeObjectURL(previewUrl);\n  }, \"image/jpeg\", 0.66);\n};","map":{"version":3,"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","x","y","toBlob","blob","generateDownload","crop","previewUrl","window","URL","createObjectURL","anchor","download","href","click","revokeObjectURL"],"sources":["D:/Code_Gym/Data GitHub/final_module/Developer/A0523I1-Repo-FE/src/components/employee/utils/CropImage.js"],"sourcesContent":["const createImage = (url) =>\r\n    new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.addEventListener(\"load\", () => resolve(image));\r\n        image.addEventListener(\"error\", (error) => reject(error));\r\n        image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\r\n        image.src = url;\r\n    });\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n    return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n    const image = await createImage(imageSrc);\r\n    const canvas = document.createElement(\"canvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const maxSize = Math.max(image.width, image.height);\r\n    const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\r\n\r\n    // set each dimensions to double largest dimension to allow for a safe area for the\r\n    // image to rotate in without being clipped by canvas context\r\n    canvas.width = safeArea;\r\n    canvas.height = safeArea;\r\n\r\n    // translate canvas context to a central location on image to allow rotating around the center.\r\n    ctx.translate(safeArea / 2, safeArea / 2);\r\n    ctx.rotate(getRadianAngle(rotation));\r\n    ctx.translate(-safeArea / 2, -safeArea / 2);\r\n\r\n    // draw rotated image and store data.\r\n    ctx.drawImage(\r\n        image,\r\n        safeArea / 2 - image.width * 0.5,\r\n        safeArea / 2 - image.height * 0.5\r\n    );\r\n\r\n    const data = ctx.getImageData(0, 0, safeArea, safeArea);\r\n\r\n    // set canvas width to final desired crop size - this will clear existing context\r\n    canvas.width = pixelCrop.width;\r\n    canvas.height = pixelCrop.height;\r\n\r\n    // paste generated rotate image with correct offsets for x,y crop values.\r\n    ctx.putImageData(\r\n        data,\r\n        0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n        0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\r\n    );\r\n\r\n    // As Base64 string\r\n    // return canvas.toDataURL(\"image/jpeg\");\r\n    // return canvas;\r\n    return new Promise((resolve, reject) => {\r\n        canvas.toBlob(\r\n            (blob) => {\r\n                resolve(blob);\r\n            },\r\n            \"image/jpeg\",\r\n            0.66)\r\n    })\r\n}\r\n\r\nexport const generateDownload = async (imageSrc, crop) => {\r\n    if (!crop || !imageSrc) {\r\n        return;\r\n    }\r\n\r\n    const canvas = await getCroppedImg(imageSrc, crop);\r\n\r\n    canvas.toBlob(\r\n        (blob) => {\r\n            const previewUrl = window.URL.createObjectURL(blob);\r\n\r\n            const anchor = document.createElement(\"a\");\r\n            anchor.download = \"image.jpeg\";\r\n            anchor.href = URL.createObjectURL(blob);\r\n            anchor.click();\r\n\r\n            window.URL.revokeObjectURL(previewUrl);\r\n        },\r\n        \"image/jpeg\",\r\n        0.66\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}